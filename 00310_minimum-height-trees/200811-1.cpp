// https://leetcode-cn.com/problems/minimum-height-trees/
// 挑战失败：超出时间限制
#include <iostream>
#include <vector>
#include <list>
using namespace std;

void print(const vector<int>& a)
{
	cout << "[ ";
	for (auto& e : a) cout << e << " ";
	cout << "]" << endl;
}

class Solution {
public:
	vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
		vector<vector<int>> m(n);
		for (int i = 0; i < n; ++i) {
			m[i].resize(n);
			for (int j = 0; j < n; ++j) {
				m[i][j] = (i == j ? 1 : n);
			}
		}
		list<pair<int, int>> q;
		for (auto& e : edges) {
			m[e[0]][e[1]] = 1;
			m[e[1]][e[0]] = 1;
			q.push_back(make_pair(e[0], e[1]));
		}
		while (!q.empty()) {
			int a = q.front().first;
			int b = q.front().second;
			q.pop_front();
			for (int i = 0; i < n; ++i) {
				if (m[a][i] > m[a][b] + m[b][i]) {
					m[a][i] = m[a][b] + m[b][i];
					m[i][a] = m[a][i];
					q.push_back(make_pair(a, i));
				}
				if (m[b][i] > m[b][a] + m[a][i]) {
					m[b][i] = m[b][a] + m[a][i];
					m[i][b] = m[b][i];
					q.push_back(make_pair(b, i));
				}
			}
		}
		vector<int> depth(n);
		int max_depth = n;
		for (int i = 0; i < n; ++i) {
			depth[i] = m[i][0];
			for (int j = 1; j < n; ++j) {
				if (depth[i] < m[i][j]) {
					depth[i] = m[i][j];
				}
			}
			if (max_depth > depth[i]) {
				max_depth = depth[i];
			}
		}
#if 0
		for (auto& r : m) {
			for (auto e : r) cout << e << " "; cout << endl;
		}
#endif
		vector<int> r;
		for (int i = 0; i < n; ++i) {
			if (depth[i] == max_depth) {
				r.push_back(i);
			}
		}
		return r;
	}
};

int main()
{
	Solution s;
	{
		vector<vector<int>> a = {{1, 0}, {1, 2}, {1, 3}};
		print(s.findMinHeightTrees(4, a)); // answer: [1]
	}
	{
		vector<vector<int>> a = {{0, 3}, {1, 3}, {2, 3}, {4, 3}, {5, 4}};
		print(s.findMinHeightTrees(6, a)); // answer: [3, 4]
	}
	{
		vector<vector<int>> a = {{0,1},{0,2},{0,3},{2,4},{4,5},{2,6},{5,7},{1,8},{1,9},{7,10},{8,11},{4,12},{5,13},{13,14},{1,15},{5,16},{16,17},{15,18},{18,19},{18,20},{18,21},{4,22},{4,23},{20,24},{3,25},{12,26},{3,27},{5,28},{23,29},{29,30},{13,31},{9,32},{11,33},{7,34},{0,35},{27,36},{19,37},{29,38},{37,39},{38,40},{1,41},{24,42},{8,43},{42,44},{0,45},{36,46},{45,47},{42,48},{18,49},{20,50},{33,51},{25,52},{44,53},{8,54},{31,55},{48,56},{14,57},{47,58},{36,59},{39,60},{20,61},{19,62},{42,63},{55,64},{33,65},{51,66},{37,67},{37,68},{27,69},{54,70},{37,71},{20,72},{10,73},{50,74},{48,75},{16,76},{22,77},{60,78},{26,79},{46,80},{8,81},{67,82},{15,83},{50,84},{0,85},{41,86},{0,87},{28,88},{25,89},{57,90},{86,91},{15,92},{43,93},{29,94},{81,95},{70,96},{18,97},{41,98},{97,99},{18,100},{60,101},{6,102},{28,103},{4,104},{20,105},{26,106},{14,107},{55,108},{24,109},{46,110},{109,111},{74,112},{58,113},{89,114},{50,115},{32,116},{14,117},{74,118},{12,119},{5,120},{55,121},{14,122},{60,123},{62,124},{115,125},{64,126},{87,127},{24,128},{31,129},{16,130},{124,131},{118,132},{18,133},{30,134},{118,135},{113,136},{99,137},{24,138},{82,139},{2,140},{9,141},{112,142},{41,143},{48,144},{11,145},{99,146},{65,147},{107,148},{111,149},{126,150},{20,151},{149,152},{119,153},{146,154},{111,155},{151,156},{26,157},{41,158},{145,159},{87,160},{84,161},{91,162},{74,163},{34,164},{22,165},{126,166},{161,167},{17,168},{61,169},{134,170},{70,171},{30,172},{95,173},{162,174},{146,175},{5,176},{141,177},{113,178},{42,179},{80,180},{6,181},{4,182},{41,183},{65,184},{36,185},{179,186},{101,187},{106,188},{149,189},{126,190},{84,191},{139,192},{144,193},{27,194},{152,195},{125,196},{188,197},{64,198},{72,199},{54,200},{86,201},{96,202},{109,203},{194,204},{123,205},{130,206},{49,207},{189,208},{39,209},{42,210},{186,211},{147,212},{83,213},{86,214},{155,215},{141,216},{56,217},{137,218},{142,219},{76,220},{19,221},{196,222},{99,223},{44,224},{60,225},{79,226},{70,227},{88,228},{60,229},{167,230},{17,231},{118,232},{206,233},{111,234},{48,235},{91,236},{230,237},{118,238},{83,239},{156,240},{168,241},{113,242},{109,243},{126,244},{127,245},{196,246},{71,247},{165,248},{131,249},{157,250},{83,251},{201,252},{112,253},{80,254},{72,255},{201,256},{139,257},{106,258},{246,259},{66,260},{252,261},{96,262},{109,263},{91,264},{35,265},{196,266},{181,267},{248,268},{4,269},{166,270},{103,271},{86,272},{270,273},{133,274},{225,275},{136,276},{260,277},{87,278},{122,279},{180,280},{31,281},{48,282},{213,283},{239,284},{5,285},{66,286},{19,287},{101,288},{88,289},{44,290},{173,291},{67,292},{179,293}};
		print(s.findMinHeightTrees(294, a)); // answer: [3, 4]
	}
	return 0;
}
